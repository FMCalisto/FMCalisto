name: Update README

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JQ
        run: sudo apt-get install -y jq

      - name: Fetch and Update Commit Count
        env:
          UPDATE_README: ${{ secrets.UPDATE_README }}
        run: |
          total_commits=0
          page=1
          while :; do
            echo "Fetching repos for page $page"

            # Fetch rate limit status
            rate_limit=$(curl -s -H "Authorization: token $UPDATE_README" https://api.github.com/rate_limit)
            remaining=$(echo "$rate_limit" | jq '.resources.core.remaining')
            reset=$(echo "$rate_limit" | jq '.resources.core.reset')

            # Handle rate limit exceeded
            if [ "$remaining" -eq 0 ]; then
              wait_time=$((reset - $(date +%s) + 1))
              echo "Rate limit exceeded. Waiting for reset in $wait_time seconds..."
              sleep $wait_time
              continue
            fi

            # Fetch repositories for the current page
            repos=$(curl -s -H "Authorization: token $UPDATE_README" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/user/repos?per_page=100&page=$page")
            echo "Raw repositories response: $repos"
            repos=$(echo "$repos" | jq -r '.[].full_name')
            echo "Repositories fetched: $repos"

            if [ -z "$repos" ]; then
              echo "No more repositories found on page $page"
              break
            fi

            for repo in $repos; do
              if [ -n "$repo" ]; then
                echo "Processing repo: $repo"
                repo_commits=0
                commit_page=1
                while :; do
                  echo "Fetching commits for repo $repo, page $commit_page"
                  
                  # Fetch commits for the repo, with rate limit check if nearing the limit
                  if [ "$remaining" -le 10 ]; then
                    rate_limit=$(curl -s -H "Authorization: token $UPDATE_README" https://api.github.com/rate_limit)
                    remaining=$(echo "$rate_limit" | jq '.resources.core.remaining')
                    reset=$(echo "$rate_limit" | jq '.resources.core.reset')

                    if [ "$remaining" -eq 0 ]; then
                      wait_time=$((reset - $(date +%s) + 1))
                      echo "Rate limit exceeded. Waiting for reset in $wait_time seconds..."
                      sleep $wait_time
                      continue
                    fi
                  fi

                  commits=$(curl -s -H "Authorization: token $UPDATE_README" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$repo/commits?per_page=100&page=$commit_page")
                  echo "Raw commits response: $commits"

                  if echo "$commits" | jq empty; then
                    commit_count=$(echo "$commits" | jq '. | length')
                    if [ -z "$commit_count" ] || ! [[ "$commit_count" =~ ^[0-9]+$ ]]; then
                      echo "Invalid or empty commit count: '$commit_count'"
                      break
                    fi
                    if [ "$commit_count" -eq 0 ]; then
                      echo "No commits found on page $commit_page for repo $repo"
                      break
                    fi
                    echo "Found $commit_count commits on page $commit_page for repo $repo"
                    repo_commits=$((repo_commits + commit_count))
                    commit_page=$((commit_page + 1))
                  else
                    echo "Error fetching commits for repo $repo, page $commit_page: $commits"
                    break
                  fi
                done
                echo "Total commits for repo $repo: $repo_commits"
                total_commits=$((total_commits + repo_commits))
              else
                echo "Empty repository name found: '$repo'"
              fi
            done
            page=$((page + 1))
          done
          echo "Total commits across all repos: $total_commits"

          # Update the README file with the new commit count
          sed -i "s/Total Commits: [0-9,]*/Total Commits: ${total_commits}/" README.md

      - name: Commit changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update total commits in README"
          git push
