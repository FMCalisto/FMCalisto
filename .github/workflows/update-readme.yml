name: Update README

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-commits:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part: [1, 2, 3, 4] # Split into 4 parts
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JQ
        run: sudo apt-get install -y jq

      - name: Fetch and Update Commit Count (Part ${{ matrix.part }})
        env:
          UPDATE_README: ${{ secrets.UPDATE_README }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status
          total_commits=0
          page=1
          last_commit_date=$(cat last_commit_date.txt || echo '1970-01-01T00:00:00Z')

          while :; do
            echo "Fetching repos for page $page"

            # Fetch rate limit status
            rate_limit=$(curl -s -H "Authorization: token $UPDATE_README" https://api.github.com/rate_limit)
            remaining=$(echo "$rate_limit" | jq '.resources.core.remaining // empty')
            reset=$(echo "$rate_limit" | jq '.resources.core.reset // empty')

            # Handle rate limit exceeded
            if [ -z "$remaining" ] || [ -z "$reset" ] || [ "$remaining" -eq 0 ]; then
              if [ -n "$reset" ]; then
                wait_time=$((reset - $(date +%s) + 1))
                echo "Rate limit exceeded or invalid rate limit data. Waiting for reset in $wait_time seconds..."
                sleep $wait_time
              else
                echo "Rate limit data is invalid or missing. Exiting."
                exit 1
              fi
              continue
            fi

            # Fetch repositories for the current page
            repos=$(curl -s -H "Authorization: token $UPDATE_README" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/user/repos?per_page=100&page=$page")
            if ! echo "$repos" | jq empty 2>/dev/null; then
              echo "Failed to fetch repositories or invalid JSON response: $repos"
              break
            fi

            repos=$(echo "$repos" | jq -r '.[].full_name // empty')
            echo "Repositories fetched: $repos"

            if [ -z "$repos" ]; then
              echo "No more repositories found on page $page"
              break
            fi

            # Split the repositories based on the matrix part
            repos_array=($repos)
            total_repos=${#repos_array[@]}
            part_size=$(( (total_repos + 3) / 4 ))  # Divide into 4 parts, rounding up
            start_index=$(( (${matrix.part} - 1) * part_size ))
            end_index=$(( ${matrix.part} * part_size - 1 ))

            echo "Matrix Part: ${{ matrix.part }}"
            echo "Total Repos: $total_repos"
            echo "Part Size: $part_size"
            echo "Start Index: $start_index"
            echo "End Index: $end_index"

            for repo_index in $(seq $start_index $end_index); do
              if [ $repo_index -ge $total_repos ]; then
                echo "Repo index $repo_index exceeds total repos $total_repos. Breaking."
                break
              fi

              repo=${repos_array[$repo_index]}
              if [ -n "$repo" ]; then
                echo "Processing repo: $repo"
                repo_commits=0
                commit_page=1
                while :; do
                  echo "Fetching commits for repo $repo, page $commit_page"

                  # Fetch commits for the repo, with rate limit check if nearing the limit
                  if [ "$remaining" -le 10 ]; then
                    rate_limit=$(curl -s -H "Authorization: token $UPDATE_README" https://api.github.com/rate_limit)
                    remaining=$(echo "$rate_limit" | jq '.resources.core.remaining // empty')
                    reset=$(echo "$rate_limit" | jq '.resources.core.reset // empty')

                    if [ -z "$remaining" ] || [ -z "$reset" ] || [ "$remaining" -eq 0 ]; then
                      if [ -n "$reset" ]; then
                        wait_time=$((reset - $(date +%s) + 1))
                        echo "Rate limit exceeded or invalid rate limit data. Waiting for reset in $wait_time seconds..."
                        sleep $wait_time
                      else
                        echo "Rate limit data is invalid or missing. Exiting."
                        exit 1
                      fi
                      continue
                    fi
                  fi

                  commits=$(curl -s -H "Authorization: token $UPDATE_README" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$repo/commits?since=$last_commit_date&per_page=100&page=$commit_page")
                  if ! echo "$commits" | jq empty 2>/dev/null; then
                    echo "Failed to fetch commits or invalid JSON response for repo $repo, page $commit_page: $commits"
                    break
                  fi

                  commit_count=$(echo "$commits" | jq '. | length')
                  if [ -z "$commit_count" ] || ! [[ "$commit_count" =~ ^[0-9]+$ ]]; then
                    echo "Invalid or empty commit count: '$commit_count'"
                    break
                  fi
                  if [ "$commit_count" -eq 0 ]; then
                    echo "No commits found on page $commit_page for repo $repo"
                    break
                  fi
                  echo "Found $commit_count commits on page $commit_page for repo $repo"
                  repo_commits=$((repo_commits + commit_count))
                  commit_page=$((commit_page + 1))
                done
                echo "Total commits for repo $repo: $repo_commits"
                total_commits=$((total_commits + repo_commits))
              else
                echo "Empty repository name found: '$repo'"
              fi
            done
            page=$((page + 1))
          done
          echo "Total commits across all repos: $total_commits"

          # Update the README file with the new commit count
          sed -i "s/Total Commits: [0-9,]*/Total Commits: ${total_commits}/" README.md

          # After processing commits, update the last commit date
          new_last_commit_date=$(echo "$commits" | jq -r '.[-1].commit.author.date // empty')
          echo "$new_last_commit_date" > last_commit_date.txt

      - name: Commit changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md last_commit_date.txt
          git commit -m "Update total commits in README"
          git push
