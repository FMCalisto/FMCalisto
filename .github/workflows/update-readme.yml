name: Update README

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JQ
        run: sudo apt-get install -y jq

      - name: Fetch and Update Commit Count
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          total_commits=0
          page=1

          while :; do
            echo "Fetching repos for page $page"

            rate_limit=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/rate_limit)
            remaining=$(echo "$rate_limit" | jq '.resources.core.remaining // empty')
            reset=$(echo "$rate_limit" | jq '.resources.core.reset // empty')

            if [ -z "$remaining" ] || [ -z "$reset" ] || [ "$remaining" -eq 0 ]; then
              if [ -n "$reset" ]; then
                wait_time=$((reset - $(date +%s) + 1))
                echo "Rate limit exceeded or invalid rate limit data. Waiting for reset in $wait_time seconds..."
                sleep $wait_time
              else
                echo "Rate limit data is invalid or missing. Exiting."
                exit 1
              fi
              continue
            fi

            repos=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/user/repos?per_page=100&page=$page")
            if ! echo "$repos" | jq empty 2>/dev/null; then
              echo "Failed to fetch repositories or invalid JSON response: $repos"
              break
            fi

            repos=$(echo "$repos" | jq -r '.[].full_name // empty')
            echo "Repositories fetched: $repos"

            if [ -z "$repos" ]; then
              echo "No more repositories found on page $page"
              break
            fi

            for repo in $repos; do
              echo "Processing repo: $repo"
              repo_commits=0
              commit_page=1
              while :; do
                echo "Fetching commits for repo $repo, page $commit_page"

                if [ "$remaining" -le 10 ]; then
                  rate_limit=$(curl -s -H "Authorization: token $GH_TOKEN" https://api.github.com/rate_limit)
                  remaining=$(echo "$rate_limit" | jq '.resources.core.remaining // empty')
                  reset=$(echo "$rate_limit" | jq '.resources.core.reset // empty')

                  if [ -z "$remaining" ] || [ -z "$reset" ] || [ "$remaining" -eq 0 ]; then
                    if [ -n "$reset" ]; then
                      wait_time=$((reset - $(date +%s) + 1))
                      echo "Rate limit exceeded or invalid rate limit data. Waiting for reset in $wait_time seconds..."
                      sleep $wait_time
                    else
                      echo "Rate limit data is invalid or missing. Exiting."
                      exit 1
                    fi
                    continue
                  fi
                fi

                commits=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$repo/commits?per_page=100&page=$commit_page")
                if ! echo "$commits" | jq empty 2>/dev/null; then
                  echo "Failed to fetch commits or invalid JSON response for repo $repo, page $commit_page: $commits"
                  break
                fi

                commit_count=$(echo "$commits" | jq '. | length')
                if [ -z "$commit_count" ] || ! [[ "$commit_count" =~ ^[0-9]+$ ]]; then
                  echo "Invalid or empty commit count: '$commit_count'"
                  break
                fi
                if [ "$commit_count" -eq 0 ]; then
                  echo "No commits found on page $commit_page for repo $repo"
                  break
                fi
                echo "Found $commit_count commits on page $commit_page for repo $repo"
                repo_commits=$((repo_commits + commit_count))
                commit_page=$((commit_page + 1))
              done
              echo "Total commits for repo $repo: $repo_commits"
              total_commits=$((total_commits + repo_commits))
            done
            page=$((page + 1))
          done
          echo "Total commits across all repos: $total_commits"

          if grep -q "Total Commits: [0-9,]*" README.md; then
            sed -i "s/Total Commits: [0-9,]*/Total Commits: ${total_commits}/" README.md
          else
            echo "Total Commits: ${total_commits}" >> README.md
          fi

      - name: Commit changes
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update total commits in README"
          git push || true
